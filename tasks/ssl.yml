---
- name: detect target python version
  set_fact:
    python_ver: "{{ (ansible_python.version.major == 3)
                  | ternary('python3','python') }}"

- name: install ansible openssl bindings
  apt:
    name:
      - "{{ python_ver }}-openssl"
      - "{{ python_ver }}-pip"
    state: present

- block:
    - name: verify validity of pyOpenSSL (ansible openssl bindings)
      command:
        argv:
          - "{{ ansible_python.executable }}"
          - -c
          - "from OpenSSL import SSL"
      changed_when: false
  rescue:
    - name: upgrade ansible openssl bindings
      command:
        argv:
          - "{{ ansible_python.executable }}"
          - -m
          - pip
          - install
          - --upgrade
          - pyOpenSSL


- name: generate ssl private key (4096 bits, rsa) for squid
  openssl_privatekey:
    path: "{{ squid_etc_dir }}/ssl.key"
    owner: root
    group: "{{ squid_group }}"
    mode: 0640
  notify: restart squid service

- name: generate certificate signing request for squid
  openssl_csr:
    path: "{{ squid_etc_dir }}/ssl.csr"
    privatekey_path: "{{ squid_etc_dir }}/ssl.key"
    common_name: "{{ squid_host }}"
    owner: root
    group: "{{ squid_group }}"
    mode: 0640
  notify: restart squid service

- name: generate self-signed ssl certificate for squid
  openssl_certificate:
    path: "{{ squid_etc_dir }}/ssl.crt"
    privatekey_path: "{{ squid_etc_dir }}/ssl.key"
    csr_path: "{{ squid_etc_dir }}/ssl.csr"
    provider: selfsigned
    owner: root
    group: "{{ squid_group }}"
    mode: 0640
  notify: restart squid service

- name: grant squid user access to letsencrypt certificates
  user:
    name: "{{ squid_user }}"
    groups: "{{ certbot_group }}"
    append: yes
  notify: restart squid service
  when: "squid_letsencrypt_cert != ''
         and certbot_group is defined"
...
