---
- name: install ansible passlib bindings
  apt:
    name: "{{ lin_use_python2 |bool |ternary(packages_pythons, packages_python3) }}"
    state: present
  vars:
    packages_pythons: python3-passlib,python3-pip,python-passlib,python-pip
    packages_python3: python3-passlib,python3-pip

- name: configure squid authentication
  # crypt_scheme is MD5 because squid does not support SHA
  htpasswd:
    path: "{{ squid_etc_dir }}/users.db"
    name: "{{ item.user }}"
    password: "{{ item.pass }}"
    crypt_scheme: apr_md5_crypt
    owner: root
    group: "{{ squid_group }}"
    mode: 0640
  notify: restart squid service
  ignore_errors: "{{ ansible_check_mode }}"
  no_log: "{{ hide_secrets |bool }}"
  loop: "{{ squid_proxy_users }}"
  loop_control:
    label: "{{ item.user }}"
  when: squid_auth_htpasswd |bool


- name: backup vanilla squid configuration
  command:
    argv:
      - cp
      - -a
      - "{{ squid_etc_dir }}/squid.conf"
      - "{{ squid_etc_dir }}/squid.conf.orig"
    creates: "{{ squid_etc_dir }}/squid.conf.orig"
  ignore_errors: true
  tags: srv_squid_config

- name: configure squid (depends on interfaces created by other roles!)
  template:
    src: squid.conf.j2
    dest: "{{ squid_etc_dir }}/squid.conf"
    backup: true
    owner: root
    group: "{{ squid_group }}"
    mode: 0640
  notify: restart squid service


- name: upload squid error pages
  unarchive:
    src: "errorpages-{{ squid_cloaking |bool |ternary('cloaked', 'plain') }}.tar.gz"
    dest: "{{ squid_etc_dir }}"
    owner: root
    group: "{{ squid_group }}"
  notify: restart squid service

- name: upload squid adblock rules
  copy:
    src: adblock
    dest: "{{ squid_etc_dir }}"
    owner: root
    group: "{{ squid_group }}"
  notify: restart squid service
...
